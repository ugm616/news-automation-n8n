version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: news-automation-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: news_automation
      POSTGRES_USER: newsbot
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newsbot -d news_automation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news-automation-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: news-automation-n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-change_this_password}
      
      # Database connection
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=news_automation
      - DB_POSTGRESDB_USER=newsbot
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-change_this_password}
      
      # Execution settings
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      
      # Timezone
      - GENERIC_TIMEZONE=UTC
      
      # Credentials encryption
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-generate_a_random_key_here}
      
      # External hooks
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/workflows:ro
      - ./channels:/channels
      - ./scripts:/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - news-automation-network
    command: n8n start

  # API Server for Multi-Channel Management
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: news-automation-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://newsbot:${DB_PASSWORD:-change_this_password}@postgres:5432/news_automation
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - JWT_SECRET=${JWT_SECRET:-change_this_secret}
    ports:
      - "3000:3000"
    volumes:
      - ./channels:/channels:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - news-automation-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Web Interface
  dashboard:
    image: nginx:alpine
    container_name: news-automation-dashboard
    restart: unless-stopped
    volumes:
      - ./dashboard:/usr/share/nginx/html:ro
      - ./dashboard/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - api
    networks:
      - news-automation-network

  # Redis for caching and job queues (optional)
  redis:
    image: redis:7-alpine
    container_name: news-automation-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - news-automation-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  redis_data:
    driver: local

networks:
  news-automation-network:
    driver: bridge

# Health check script
# Run: docker-compose ps
# Check logs: docker-compose logs -f [service_name]
# Restart service: docker-compose restart [service_name]
# Stop all: docker-compose down
# Start all: docker-compose up -d
